# Generated by Django 5.1.7 on 2025-03-11 14:25
from io import BytesIO
from urllib.error import URLError, HTTPError
from urllib.request import urlopen
from zipfile import ZipFile

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.contrib.gis.gdal import DataSource
from django.contrib.gis.utils import LayerMapping
from django.db import migrations, models

import logging


logger = logging.getLogger(__name__)


def get_general_timezones(apps, schema_editor):
    logger.info("Starting to create general timezones")
    TimezoneGeneral = apps.get_model('web', 'TimezoneGeneral')

    meridian = 180
    utc_hours = 12
    while utc_hours >= -12:
        step = 7.5 if meridian == 180 or meridian == -172.5 else 15
        name = f'UTC+{utc_hours}' if utc_hours >= 0 else f'UTC{utc_hours}'

        general_timezone = TimezoneGeneral(
            name=name,
            long_min=meridian - step,
            long_max=meridian,
        )
        general_timezone.save()

        utc_hours -= 1
        meridian -= step
    logger.info("Finished creating general timezones")


def save_shp_from_link(link: str, path: str) -> str | None:
    try:
        response = urlopen(link)
        zipfile = ZipFile(BytesIO(response.read()))
        shp_files = [name for name in zipfile.namelist() if name.endswith(settings.SHP_FILE_EXT)]
        
        if not shp_files:
            logger.info(f"No shapefile found in zip file")
            return None

        name = shp_files[0]
        zipfile.extractall(path)

        file_path = f'{path}/{name}'
        return file_path

    except (URLError, HTTPError) as e:
        logger.error(f"Error downloading file: {e}")
        return None


def save_shp_to_postgis(file_path: str, model) -> None:   
    try:
        ds = DataSource(file_path)
        layer = ds[0]
        field_name = layer.fields[0]
        # Mapping between the model fields and the shapefile fields
        mapping = {
            'name': field_name,
            'poly': 'POLYGON',
        }

        # LayerMapping instance
        lm = LayerMapping(model, file_path, mapping)
        lm.save(strict=True, verbose=True)
    except Exception as e:
        logger.error(f"Error processing shapefile: {e}")


def save_tz_shapefile(apps, schema_editor):
    logger.info("Starting to save timezone shapefile")
    
    # Download the shapefile
    file_path = save_shp_from_link(settings.TZ_SHAPEFILE_URL, settings.TZ_SHAPEFILE_TEMP)
    
    if file_path:
        TimezoneShape = apps.get_model('web', 'TimezoneShape')
        save_shp_to_postgis(file_path, TimezoneShape)
    else:
        logger.error("Failed to download shapefile, skipping save to PostGIS")

    logger.info("Finished saving timezone shapefile")


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='TimezoneGeneral',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=255)),
                ('long_min', models.FloatField()),
                ('long_max', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='TimezoneShape',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=255)),
                ('poly', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
            ],
        ),
        migrations.RunPython(get_general_timezones, lambda a, s: None),
        migrations.RunPython(save_tz_shapefile, lambda a, s: None),
    ]
